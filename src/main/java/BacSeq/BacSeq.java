/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package BacSeq;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.*;
import java.applet.Applet;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;
//import org.apache.commons.io.IOUtils;
import java.io.*;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
//import javax.swing.BacSeq;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.SwingConstants;
import javax.swing.JPanel;
import javax.swing.Box;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.BoxLayout;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;
/**
 *
 * @author T0NN4M
 */
public class BacSeq extends javax.swing.JFrame {

    
    /**
     * Creates new form JFrame
     */
    public BacSeq() {
        initComponents();
        setDefaultCloseOperation(3);
    setTitle("BacSeq : An automated pipeline for whole genome sequence");
    setResizable(false);
    }

//    public void initComponents(){
//    
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jButton24 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jButton26 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jButton27 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jButton28 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jButton29 = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        jButton30 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jButton22 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jButton31 = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jButton32 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("An automated pipeline for whole genome sequence");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Select directory");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jButton1.setText("Browse...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Basic Mode");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Advanced Mode");
        jButton5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton5ComponentShown(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 72)); // NOI18N
        jLabel1.setText("BacSeq");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(48, 48, 48))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100))
        );

        jTabbedPane1.addTab("Home", jPanel2);

        jLabel23.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel23.setText("Prokka");

        jButton18.setText("Execute");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel25.setText("SPAdes");

        jButton20.setText("Execute");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton23.setText("Execute");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel28.setText("MultiQC");

        jLabel29.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel29.setText("FastQC");

        jButton24.setText("Execute");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel30.setText("Fastp");

        jButton25.setText("Execute");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel31.setText("Quast");

        jButton26.setText("Execute");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel32.setText("Busco");

        jButton27.setText("Execute");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setText("Quality control");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("Trimming");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel6.setText("Assembly");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel7.setText("Quality assessment");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel8.setText("Completeness assessment");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel9.setText("Annotation");

        jLabel10.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel10.setText("Functional annotation");

        jLabel33.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel33.setText("eggNOG");

        jButton28.setText("Execute");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel23)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)))
                    .addComponent(jLabel25)
                    .addComponent(jLabel30)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 433, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jButton24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jButton23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jButton25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jButton20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jButton26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jButton27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jButton18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jButton28))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("De novo", jPanel3);

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel11.setText("Downstream analysis");

        jLabel24.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel24.setText("Abricate");

        jButton19.setText("Execute");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel26.setText("StarAMR");

        jButton21.setText("Execute");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel34.setText("Run-dbcan");

        jButton29.setText("Execute");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel35.setText("CRISPRCasFinder");

        jButton30.setText("Execute");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel26)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 334, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jButton19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jButton21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jButton29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jButton30))
                .addContainerGap(317, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Downstream analysis", jPanel4);

        jLabel12.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel12.setText("Comparative analysis");

        jLabel27.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel27.setText("Roary");

        jButton22.setText("Execute");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel36.setText("SNPsite");

        jButton31.setText("Execute");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel37.setText("FastTree");

        jButton32.setText("Execute");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 422, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(107, 107, 107))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jButton22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jButton31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jButton32))
                .addContainerGap(356, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Comparative analysis", jPanel1);

        jLabel13.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel13.setText("Visualization and report");

        jLabel16.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel16.setText("De novo assembly");

        jLabel17.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel17.setText("Downstream analysis");

        jLabel18.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel18.setText("Comparative analysis");

        jButton2.setText("FastQC");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("MultiQC");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Fastp");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("SPAdes");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Quast");
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Busco");
        jButton9.setEnabled(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Prokka");
        jButton10.setEnabled(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("eggNOG");
        jButton11.setEnabled(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Abricate");
        jButton12.setEnabled(false);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("StarAMR");
        jButton13.setEnabled(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Run-dbcan");
        jButton14.setEnabled(false);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("CRISPRCasFinder");
        jButton15.setEnabled(false);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Roary");
        jButton16.setEnabled(false);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("SNPsite");
        jButton17.setEnabled(false);
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton33.setText("FastTree");
        jButton33.setEnabled(false);
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(158, 158, 158)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(149, 149, 149)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(75, 75, 75))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(98, 98, 98)
                .addComponent(jLabel18)
                .addGap(47, 47, 47))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton12)
                    .addComponent(jButton16))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton13)
                    .addComponent(jButton17))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton14)
                    .addComponent(jButton33))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton15))
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addGap(18, 18, 18)
                .addComponent(jButton11)
                .addGap(36, 36, 36))
        );

        jTabbedPane1.addTab("Visualization and report", jPanel5);

        jLabel20.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel20.setText("Developed by Molecular Evolution and Computational Biology Research Unit (MECoB)");

        jLabel14.setText("Prince of Songkla University,Hatyai,Songkhla,Thailand");

        jLabel15.setText("Email : mecob.psu@gmail.com");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(jLabel15))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jLabel14)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Contact", jPanel6);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 570));
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Object[] possibilities = {"De Novo assembly"};
        String s = (String)JOptionPane.showInputDialog(
            null,
            "Do you want to analyze with:\n"
            + "De Novo assembly",
            "Pipeline configuration",
            JOptionPane.PLAIN_MESSAGE,
            null,
            possibilities,
            "De Novo assembly");

        //If a string was returned, say so.
        if ((s != null) && (s.length() > 0)) {
            System.out.print("Analyze with " + s + "?");
        }
        //        System.out.println(path_program);
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton5ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton5ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        Object[] possibilities = {"De Novo assembly"};
        String s = (String)JOptionPane.showInputDialog(
            null,
            "Do you want to analyze with:\n"
            + "De Novo assembly",
            "Pipeline configuration",
            JOptionPane.PLAIN_MESSAGE,
            null,
            possibilities,
            "De Novo assembly");

        //If a string was returned, say so.
        if ((s != null) && (s.length() > 0)) {
            System.out.print("Analyze with " + s + "?");
        }
        if(s == "De Novo assembly"){
            jButton24.doClick();
            jButton23.doClick();
            jButton25.doClick();
            jButton20.doClick();
            jButton26.doClick();
            jButton27.doClick();
            jButton18.doClick();
            jButton28.doClick();
            jButton19.doClick();
            jButton21.doClick();
            jButton29.doClick();
            jButton30.doClick();
            jButton22.doClick();
            jButton31.doClick();
            jButton32.doClick();
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String concat = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //    String concat = workingDir.concat("/Software/uploaded/R1.fastq.gz");
        String uploaded_file = "File R1 is uploaded in the folder: ";
        String concat_upload = uploaded_file.concat(concat);
//        System.out.println(concat);
        JFileChooser chooser = new JFileChooser();
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("gz", new String[] { "gz" });
//        chooser.setFileFilter(filter);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // optionally set chooser options ...
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            // read  and/or display the file somehow. ....
            String currentFileBeingEdited = file.getAbsolutePath();
            this.jTextField1.setText(currentFileBeingEdited);
            this.jTextField1.setEnabled(false);
            System.out.println("Selected Directory: " 
         +  chooser.getCurrentDirectory());
            
            String path_Program = new_workingDir.concat("/Software/biotools/scripts/./select_dir.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");
        String path_folder = "Select folder is Successful\n";
        String path_folder1 = new_workingDir.concat("/Software/uploaded");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
        Runtime r1 = Runtime.getRuntime();
        int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        String[] selectdir_command = { path_Program, new_workingDir, cores, file.getAbsolutePath()};

        System.out.println(label);
        try {
            Process p1 = r1.exec(selectdir_command);
            JOptionPane.showMessageDialog(null,
                "Select directory...\n press ok button and wait until process success",
                "Upload directory",
                JOptionPane.WARNING_MESSAGE);

            p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Directory selected.");

                System.out.println(path_concat);
//                this.jButton1.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "command failed.");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
//            File dest = new File(concat);
//            FileChannel sourceChannel = null;
//            FileChannel destChannel = null;
//            //            System.out.println(dest.getName());
//            try {
//                sourceChannel = (new FileInputStream(currentFileBeingEdited)).getChannel();
//                destChannel = (new FileOutputStream(dest)).getChannel();
//                destChannel.transferFrom(sourceChannel, 0L, sourceChannel.size());
//
//                System.out.println(concat_upload);
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
//            } finally {
//                try {
//                    sourceChannel.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
//                }
//                try {
//                    destChannel.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
//                }
//            }
//            File dest = new File(concat);
//            FileChannel sourceChannel = null;
//            FileChannel destChannel = null;
//            //            System.out.println(dest.getName());
//            try {
//                sourceChannel = (new FileInputStream(currentFileBeingEdited)).getChannel();
//                destChannel = (new FileOutputStream(dest)).getChannel();
//                destChannel.transferFrom(sourceChannel, 0L, sourceChannel.size());
//
//                System.out.println(concat_upload);
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, (String)null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, (String)null, ex);
//            } finally {
//                try {
//                    sourceChannel.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, (String)null, ex);
//                }
//                try {
//                    destChannel.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, (String)null, ex);
//                }
//            }
        } else {
            // user changed their mind
            System.out.println("Cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./prokka_script.sh");
        String path_folder = "Prokka is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/prokka");
        String path_concat = path_folder.concat(path_folder1);
        //         String[] date= {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"};
        //        String[] month= {"1","2","3","4","5","6","7","8","9","10","11","12"};
//        String[] trimmomatic_adapters={"TruSeq2-PE.fa","TruSeq3-PE.fa","TruSeq3-PE-2.fa","NexteraPE-PE.fa"};
        //        JComboBox jcd = new JComboBox(date);
        //        JComboBox jcm = new JComboBox(month);
          int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField1 = new JTextField();
        JTextField adjustField2 = new JTextField();
        JTextField adjustField3 = new JTextField();
        JTextField adjustField4 = new JTextField();
        JTextField adjustField5 = new JTextField();
        JTextField adjustField6 = new JTextField();
        JTextField adjustField7 = new JTextField();
        JTextField adjustField8 = new JTextField(cores);
        //    JTextField yField = new JTextField(5);

//        JComboBox trim_adapter = new JComboBox(trimmomatic_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Prokka options"));
//        myPanel.add(trim_adapter);
        //    myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        //myPanel.add(Box.createRigidArea(new Dimension(0,5)));
        //    myPanel.add(new JLabel("<html><br><br><p></p></html>"));
        JCheckBox compliant = new JCheckBox("--compliant");
        JCheckBox addgenes = new JCheckBox("--addgenes");
        JCheckBox usegenus = new JCheckBox("--usegenus");
        JCheckBox rfam = new JCheckBox("--rfam");
        myPanel.add(compliant);
        myPanel.add(addgenes);
        myPanel.add(usegenus);
        myPanel.add(rfam);
        myPanel.add(new JLabel("<html><h3>--centre</h3></html>"));

//        myPanel.add(new JLabel("Cut adapter and other illumina-specific sequences from the read."));
//        myPanel.add(new JLabel("Adjustable 0-20"));
        myPanel.add(adjustField1);
//        myPanel.add(new JLabel("Adjustable 0-40"));
//        myPanel.add(adjustField2);
//        myPanel.add(new JLabel("Adjustable 0-40"));
//        myPanel.add(adjustField3);
        myPanel.add(new JLabel("<html><h3>--genus</h3></html>"));
//        myPanel.add(new JLabel("Cut bases off the start of a read, if below a threshold quality."));
//        myPanel.add(new JLabel("Adjustable 0-40"));
        myPanel.add(adjustField4);
        myPanel.add(new JLabel("<html><h3>--species</h3></html>"));
//        myPanel.add(new JLabel("Cut bases off the end of a read, If below a threshold quality."));
//        myPanel.add(new JLabel("Adjustable 0-40"));
        myPanel.add(adjustField5);
        myPanel.add(new JLabel("<html><h3>--kingdom</h3></html>"));
        myPanel.add(new JLabel("Annotation mode: Archaea|Bacteria|Mitochondria|Viruses"));
//        myPanel.add(new JLabel("clips the read once the average quality within the window fails below a threshold."));
//        myPanel.add(new JLabel("Adjustable 0-20"));
        myPanel.add(adjustField6);
        myPanel.add(new JLabel("<html><h3>--gcode</h3></html>"));
        myPanel.add(new JLabel("Genetic code / Translation table"));
        myPanel.add(adjustField7);
        myPanel.add(new JLabel("<html><h3>--cpus</h3></html>"));
        myPanel.add(new JLabel("CPU cores."));
//        myPanel.add(new JLabel("Adjustable 1-300"));
        myPanel.add(adjustField8);

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 780, 500));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Prokka option", JOptionPane.OK_CANCEL_OPTION);
//        Object adapter_choose = trim_adapter.getSelectedItem();
//        String trimadap = adapter_choose.toString();
String minus="--";
String compliant_str;
String addgenes_str;
String usegenus_str;
String rfam_str;
        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("Adapters: " + trim_adapter.getSelectedItem());
            //      Object adapter_choose = trim_adapter.getSelectedItem();
            
            if(compliant.isSelected()){
                System.out.println("--compliant is checked");
                compliant_str = "--compliant";
            } else {
                System.out.println("--compliant is unchecked");
		compliant_str = " ";
		}
            if(addgenes.isSelected()){
                System.out.println("--addgenes is checked");
                addgenes_str = "--addgenes";
            } else {
                System.out.println("--addgenes is unchecked");
		addgenes_str = " ";
		}
            if(usegenus.isSelected()){
                System.out.println("--usegenus is checked");
                usegenus_str = "--usegenus";
            } else {
                System.out.println("--usegenus is unchecked");
		usegenus_str = " ";
		}
            if(rfam.isSelected()){
                System.out.println("--rfam is checked");
                rfam_str = "--rfam";
            } else {
                System.out.println("--rfam is unchecked");
		rfam_str = " ";
		}
            //      System.out.println(adapter_choose);
            System.out.println("--centre");
            System.out.println("\tOption 1: " + adjustField1.getText());
            //      String adjust1 = adjustField1.getText();
//            System.out.println("\tAdjust 2: " + adjustField2.getText());
//            System.out.println("\tAdjust 3: " + adjustField3.getText());
            System.out.println("--genus");
            System.out.println("\tOption 2: " + adjustField4.getText());
            System.out.println("--species");
            System.out.println("\tOption 3: " + adjustField5.getText());
            System.out.println("--kingdom");
            System.out.println("\tOption 4: " + adjustField6.getText());
            System.out.println("--gcode");
            System.out.println("\tOption 5: " + adjustField7.getText());
            System.out.println("--cpus");
            System.out.println("\tOption 6: " + adjustField8.getText());

            System.out.println(path_Program);
   
        String[] checkbox_option = {compliant_str,addgenes_str,usegenus_str,rfam_str};
        String[] prokka_command = { path_Program, new_workingDir, adjustField1.getText(), adjustField4.getText(), adjustField5.getText(), adjustField6.getText(), adjustField7.getText(), adjustField8.getText(),compliant_str,addgenes_str,usegenus_str,rfam_str};
                System.out.println(Arrays.toString(prokka_command));
//                System.out.println(Arrays.toString(checkbox_option));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
           JOptionPane.showMessageDialog(null,
                "Prokka executing.... \n press ok button and wait until process success",
                "Prokka",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(prokka_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Prokka executed successfully.");
                this.jButton10.setEnabled(true);
                System.out.println(path_concat);
                this.jButton18.setEnabled(false);
            } else {
                System.out.println("Prokka command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }

        
        
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here: Abricate
       String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./abricate_script.sh");
        String path_folder = "Abricate is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/abricate");
        String path_concat = path_folder.concat(path_folder1);
  int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
//        String[] spades_adapters={"auto","off"};
        String[] abricate_adap={"ncbi","megares","ecoli_vf","ecoh","card","plasmidfinder","vfdb","resfinder","argannot"};
        JTextField adjustField2 = new JTextField(cores);
        
//    JCheckBox careful_spades = new JCheckBox("--careful");
        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Abricate options"));
//        myPanel.add(careful_spades);
        myPanel.add(new JLabel("<html><h3>--db</h3></html>"));
        myPanel.add(abricate_adapter);
        
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 250, 250));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Abricate option", JOptionPane.OK_CANCEL_OPTION);
        
        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
        String abricateadap = abricateadapter_choose.toString();
        if (result == JOptionPane.OK_OPTION) {
            System.out.println("DB: " + abricate_adapter.getSelectedItem());
            
            System.out.println("CPU Core");
            System.out.println("\t--threads: " + adjustField2.getText());
            
            System.out.println(abricateadap);
            System.out.println(path_Program);

        String[] abricate_command = { path_Program, new_workingDir, adjustField2.getText(), abricateadap};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Abricate executing.... \n press ok button and wait until process success",
                "Abricate",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(abricate_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Abricate executed successfully.");
                this.jButton12.setEnabled(true);
                System.out.println(path_concat);
                this.jButton19.setEnabled(false);
            } else {
                System.out.println("Abricate command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here: SPAdes
          String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./spades_denovo_script.sh");
        String path_folder = "SPAdes is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/SPAdes");
        String path_concat = path_folder.concat(path_folder1);

        
        
          int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        String[] spades_adapters={"auto","off"};
        String[] spades_assembler={"Auto","--only-assembler","--only-error-correction"};
        JTextField adjustField2 = new JTextField(cores);
        
    JCheckBox careful_spades = new JCheckBox("--careful");
        JComboBox spades_assembly = new JComboBox(spades_assembler);
        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("SPAdes options"));
        myPanel.add(careful_spades);
        myPanel.add(new JLabel("<html><h3>Advanced options</h3></html>"));
        myPanel.add(spades_assembly);
        
        myPanel.add(new JLabel("<html><h3>CoV Cutoff</h3></html>"));
        myPanel.add(spades_adapter);
        //    myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        //myPanel.add(Box.createRigidArea(new Dimension(0,5)));
        //    myPanel.add(new JLabel("<html><br><br><p></p></html>"));
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 250, 250));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select SPAdes option", JOptionPane.OK_CANCEL_OPTION);
        Object spadesassembly_choose = spades_assembly.getSelectedItem();
        String spadesass = spadesassembly_choose.toString();
        Object spadesadapter_choose = spades_adapter.getSelectedItem();
        String spadesadap = spadesadapter_choose.toString();
String careful_str;
        if (result == JOptionPane.OK_OPTION) {
            System.out.println("Adapters: " + spades_adapter.getSelectedItem());
            if(spadesass == "Auto"){
                spadesass = " ";
            }
if(careful_spades.isSelected()){
                System.out.println("--careful is checked");
                careful_str = "--careful";
            } else {
                System.out.println("--careful is unchecked");
		careful_str = " ";
		}
            //      System.out.println(adapter_choose);
            System.out.println(spadesass);
            System.out.println("CPU Core");
            System.out.println("\tOption 2: " + adjustField2.getText());
            
     
            System.out.println(path_Program);
        
        String[] spadesdenovo_command = { path_Program, new_workingDir, spadesadap, adjustField2.getText(), careful_str,spadesass};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "SPAdes executing.... \n press ok button and wait until process success",
                "SPAdes",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(spadesdenovo_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "SPAdes executed successfully.");
                this.jButton7.setEnabled(true);
                System.out.println(path_concat);
                this.jButton20.setEnabled(false);
            } else {
                System.out.println("SPAdes command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
        
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here: StarAMR
            String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./staramr_script.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");

        String path_folder = "StarAMR is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/staramr");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
             int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
  JTextField adjustField2 = new JTextField(cores);
                
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("StarAMR options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select StarAMR option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t-n: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
        
        String[] staramr_command = { path_Program, new_workingDir, adjustField2.getText()};

        System.out.println(label);
        
            Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "StarAMR executing.... \n press ok button and wait until process success",
                "StarAMR",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(staramr_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "StarAMR executed successfully.");
                this.jButton13.setEnabled(true);
                System.out.println(path_concat);
                this.jButton21.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "StarAMR command failed..");
                
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here: Roary
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./roary_script.sh");
        String path_folder = "Roary is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/roary");
        String path_concat = path_folder.concat(path_folder1);

//        String[] spades_adapters={"auto","off"};
//        String[] abricate_adap={"ncbi","megares","ecoli_vf","ecoh","card","plasmidfinder","vfdb","resfinder","argannot"};
int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Roary options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        JCheckBox multifasta = new JCheckBox("-e");
        JCheckBox mafft = new JCheckBox("--mafft");
        multifasta.setSelected(true);
        mafft.setSelected(true);
        myPanel.add(mafft);
        myPanel.add(new JLabel("<html><h3>-e</h3></html>"));
        myPanel.add(new JLabel("Create a multiFASTA alignment of core genes using PRANK"));
        myPanel.add(multifasta);
        
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 400, 280));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Roary option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();
String multifasta_selected;
String mafft_selected;
        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             if(multifasta.isSelected()){
                System.out.println("-e is checked");
                multifasta_selected = "-e";
            } else {
                System.out.println("-e is unchecked");
		multifasta_selected = " ";
		}
             if(mafft.isSelected()){
                System.out.println("--mafft is checked");
                mafft_selected = "--mafft";
            } else {
                System.out.println("--mafft is unchecked");
		mafft_selected = " ";
		}
             
            System.out.println("CPU Core");
            System.out.println("\t-p: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
        
        String[] roary_command = { path_Program, new_workingDir, adjustField2.getText(), multifasta_selected, mafft_selected};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Roary executing.... \n press ok button and wait until process success",
                "Roary",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(roary_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Roary executed successfully.");
                this.jButton16.setEnabled(true);
                System.out.println(path_concat);
                this.jButton22.setEnabled(false);
            } else {
                System.out.println("Roary command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here: MultiQC
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./multiqc_script.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");

        String path_folder = "MultiQC is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/MultiQC");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
//        Runtime r1 = Runtime.getRuntime();
        int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        String[] multiqc2_command = { path_Program, new_workingDir, cores};

        System.out.println(label);
        
            Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "MultiQC executing.... \n press ok button and wait until process success",
                "MultiQC",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(multiqc2_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "MultiQC executed successfully.");
                this.jButton3.setEnabled(true);
                System.out.println(path_concat);
                this.jButton23.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "MultiQC command failed..");
                
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here: FastQC
           String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./fastqc_script.sh");
        String path_folder = "FastQC is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/FastQC");
        String path_concat = path_folder.concat(path_folder1);

  int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("FastQC options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select FastQC option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t-p: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);

        String[] fastqc2_command = { path_Program, new_workingDir, adjustField2.getText()};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "FastQC executing.... \n press ok button and wait until process success",
                "FastQC",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(fastqc2_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "FastQC executed successfully.");
                this.jButton2.setEnabled(true);
                System.out.println(path_concat);
                this.jButton24.setEnabled(false);
            } else {
                System.out.println("FastQC command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here: Fastp
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./fastp_script.sh");
        String path_folder = "Fastp is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/Fastp");
        String path_concat = path_folder.concat(path_folder1);

  int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Fastp options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Fastp option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t--thread: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
      
        String[] fastp_command = { path_Program, new_workingDir, adjustField2.getText()};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Fastp executing.... \n press ok button and wait until process success",
                "Fastp",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(fastp_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Fastp executed successfully.");
                this.jButton6.setEnabled(true);
                System.out.println(path_concat);
                this.jButton25.setEnabled(false);
            } else {
                System.out.println("Fastp command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here: Quast
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./quast_script.sh");
        String path_folder = "Quast is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/quast");
        String path_concat = path_folder.concat(path_folder1);

  int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Quast options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Quast option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t--thread: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);

        String[] quast2_command = { path_Program, new_workingDir, adjustField2.getText()};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Quast executing.... \n press ok button and wait until process success",
                "Quast",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(quast2_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Quast executed successfully.");
                this.jButton8.setEnabled(true);
                System.out.println(path_concat);
                this.jButton26.setEnabled(false);
            } else {
                System.out.println("Quast command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here: Busco*
           String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./busco_script.sh");
        String path_folder = "Busco is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/busco");
        String path_concat = path_folder.concat(path_folder1);

        
          int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        String[] busco_adapters={"Genome","Transcriptome","Proteins"};
        String[] busco_assembler={"bacteria_odb10"};
        JTextField adjustField2 = new JTextField(cores);
        
        JComboBox busco_assembly = new JComboBox(busco_assembler);
        JComboBox busco_adapter = new JComboBox(busco_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Busco options"));
        myPanel.add(new JLabel("<html><h3>Advanced options</h3></html>"));
        myPanel.add(busco_assembly);
        
        myPanel.add(busco_adapter);
        //    myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        //myPanel.add(Box.createRigidArea(new Dimension(0,5)));
        //    myPanel.add(new JLabel("<html><br><br><p></p></html>"));
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 250, 250));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Busco option", JOptionPane.OK_CANCEL_OPTION);
        Object buscoassembly_choose = busco_assembly.getSelectedItem();
        String buscoass = buscoassembly_choose.toString();
        Object buscoadapter_choose = busco_adapter.getSelectedItem();
        String buscoadap = buscoadapter_choose.toString();
String careful_str;
        if (result == JOptionPane.OK_OPTION) {
            System.out.println("Adapters: " + busco_adapter.getSelectedItem());
            if(buscoass == "bacteria_odb10"){
                buscoass = "bacteria_odb10";
            }if(buscoadap == "Genome"){
                buscoadap = "genome";
            }if(buscoadap == "Transcriptome"){
                buscoadap = "transcriptome";
            }if(buscoadap == "Proteins"){
                buscoadap = "proteins";
            }

            //      System.out.println(adapter_choose);
            System.out.println(buscoass);
            System.out.println("CPU Core");
            System.out.println("\t-c: " + adjustField2.getText());
            
     
            System.out.println(path_Program);

        String[] busco_command = { path_Program, new_workingDir, adjustField2.getText(),buscoadap,buscoass};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Busco executing.... \n press ok button and wait until process success",
                "Busco",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(busco_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Busco executed successfully.");
                this.jButton9.setEnabled(true);
                System.out.println(path_concat);
                this.jButton27.setEnabled(false);
            } else {
                System.out.println("Busco command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here: eggnog
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./eggnog_script.sh");
        String path_folder = "Eggnog-Mapper is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/eggnog");
        String path_concat = path_folder.concat(path_folder1);

  int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        JTextField eggnog_eval = new JTextField("0.001");
        JTextField eggnog_pident = new JTextField("40");
        JTextField eggnog_score = new JTextField("60");
        JTextField eggnog_query = new JTextField("20");
        JTextField eggnog_subject = new JTextField("20");
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("Eggnog-Mapper options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
    myPanel.add(new JLabel("<html><h3>--pident</h3></html>"));
        myPanel.add(new JLabel("report only alignments equal or above this percentage of identity threshold (0.0 - 100.0). Default 40"));
        myPanel.add(eggnog_pident);
        myPanel.add(new JLabel("<html><h3>--evalue</h3></html>"));
        myPanel.add(new JLabel("report only alignments equal or above this e-value threshold. Default 0.001"));
        myPanel.add(eggnog_eval);
        myPanel.add(new JLabel("<html><h3>--score</h3></html>"));
        myPanel.add(new JLabel("report only alignments equal or above this bit score threshold. Default 60"));
        myPanel.add(eggnog_score);
        myPanel.add(new JLabel("<html><h3>--query_cover</h3></html>"));
        myPanel.add(new JLabel("report only alignments equal or above this query coverage fraction threshold (0.0 - 100.0). Default 20"));
        myPanel.add(eggnog_query);
        myPanel.add(new JLabel("<html><h3>--subject_cover</h3></html>"));
        myPanel.add(new JLabel("report only alignments equal or above this target (eggNOG sequence) coverage fraction threshold (0.0 - 100.0)."));
        myPanel.add(new JLabel("Default 20"));
        myPanel.add(eggnog_subject);
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 750, 500));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Eggnog-Mapper option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
            System.out.println("Pident");
            System.out.println("\t--pident: " + eggnog_pident.getText());
            System.out.println("Evalue");
            System.out.println("\t--evalue: " + eggnog_eval.getText()); 
            System.out.println("Score");
            System.out.println("\t--score: " + eggnog_score.getText());
            System.out.println("Query cover");
            System.out.println("\t--query_cover: " + eggnog_query.getText());
            System.out.println("Subject cover");
            System.out.println("\t--subject_cover: " + eggnog_subject.getText());
            System.out.println("CPU Core");
            System.out.println("\t--cpu: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);

        String[] eggnog_command = { path_Program, new_workingDir, adjustField2.getText(), eggnog_eval.getText(), eggnog_score.getText(), eggnog_pident.getText(), eggnog_query.getText(), eggnog_subject.getText()};
//                System.out.println(Arrays.toString(spadesdenovo_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Eggnog-Mapper executing.... \n press ok button and wait until process success",
                "Eggnog-Mapper",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(eggnog_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Eggnog-Mapper executed successfully.");
                this.jButton11.setEnabled(true);
                System.out.println(path_concat);
                this.jButton28.setEnabled(false);
            } else {
                System.out.println("Eggnog-Mapper command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here: run_dbcan
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./rundbcan_script.sh");
        String path_folder = "Run_dbcan is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/run_dbcan");
        String path_concat = path_folder.concat(path_folder1);

//        String[] spades_adapters={"auto","off"};
//        String[] abricate_adap={"ncbi","megares","ecoli_vf","ecoh","card","plasmidfinder","vfdb","resfinder","argannot"};
 int label = Runtime.getRuntime().availableProcessors();
 String cores = String.valueOf(label);
        JTextField adjustField2 = new JTextField(cores);
        final JTextField dia_eval = new JTextField("1e-102");
        final JTextField hmm_eval = new JTextField("1e-15");
        final JTextField hmm_cov = new JTextField("0.35");
    final JCheckBox diamond_tools = new JCheckBox("Diamond",true);
    final JCheckBox hmmer_tools = new JCheckBox("Hmmer",true);
     diamond_tools.addItemListener(new ItemListener() {
         @Override
        public void itemStateChanged(ItemEvent e) {

            if(diamond_tools.isSelected()) {
                dia_eval.setEnabled(true);
            }else{
                dia_eval.setEnabled(false);
            }

        }
    });
//    diamond_tools.setSelected(true);
    
     hmmer_tools.addItemListener(new ItemListener() {
          @Override
        public void itemStateChanged(ItemEvent e) {

            if(hmmer_tools.isSelected()) {
                hmm_eval.setEnabled(true);
                hmm_cov.setEnabled(true);
            }else{
                hmm_eval.setEnabled(false);
                hmm_cov.setEnabled(false);
            }

        }
    });
    final JCheckBox ecami_tools = new JCheckBox("eCAMI (Much more time to process.)");
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        myPanel.add(new JLabel("Run_dbcan options"));
        myPanel.add(new JLabel("<html><h3>Select tools</h3></html>"));
        myPanel.add(diamond_tools);
        myPanel.add(hmmer_tools);
        myPanel.add(ecami_tools);
        myPanel.add(new JLabel("<html><h3>Set the DIAMOND E Value. Default = 1e-102.</h3></html>"));
        myPanel.add(dia_eval);
        myPanel.add(new JLabel("<html><h3>Set the HMMER E Value. Default = 1e-15.</h3></html>"));
        myPanel.add(hmm_eval);
        myPanel.add(new JLabel("<html><h3>Set the HMMER Coverage value. Default = 0.35.</h3></html>"));
        myPanel.add(hmm_cov);
        myPanel.add(new JLabel("<html><h3>CPU Core Default is your maximum cores.</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 400, 400));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select Run_dbcan option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();
String checked_str;

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
checked_str="";
            if(diamond_tools.isSelected()){
                checked_str = "diamond";
            }if(hmmer_tools.isSelected()){
                checked_str = "hmmer";
            }if(ecami_tools.isSelected()){
                checked_str = "ecami";
            }if(diamond_tools.isSelected() && hmmer_tools.isSelected()){
                checked_str = "{diamond,hmmer}";
            }if(diamond_tools.isSelected() && ecami_tools.isSelected()){
                checked_str = "{diamond,ecami}";
            }if(hmmer_tools.isSelected() && ecami_tools.isSelected()){
                checked_str = "{hmmer,ecami}";
            }if(diamond_tools.isSelected() && hmmer_tools.isSelected() && ecami_tools.isSelected()){
                checked_str = "all";
            
            }
//            String tools_is_checked = "-t "+checked_str;
            
//            String tools_con = "{"+diamond_checked_str+hmmer_checked_str+ecami_checked_str+"}";
            System.out.println("CPU Core");
            System.out.println("\tcpu: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
//        int label = Runtime.getRuntime().availableProcessors();
//        String cores = String.valueOf(label);
        String[] rundbcan_command = { path_Program, new_workingDir, adjustField2.getText(),dia_eval.getText(),hmm_eval.getText(),hmm_cov.getText(),checked_str};
//                System.out.println(Arrays.toString(rundbcan_command));

    Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "Run_dbcan executing.... \n press ok button and wait until process success",
                "Run_dbcan",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(rundbcan_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "Run_dbcan executed successfully.");
                this.jButton14.setEnabled(true);
                System.out.println(path_concat);
                this.jButton29.setEnabled(false);
            } else {
                System.out.println("Run_dbcan command failed");
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here: CRISPRCasFinder
           String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./cris_script.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");

        String path_folder = "CRISPRCasFinder is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/CRISPRCasFinder");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
             int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
  JTextField adjustField2 = new JTextField(cores);
                
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("CRISPRCasFinder options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select CRISPRCasFinder option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t-n: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
        
        String[] cris_command = { path_Program, new_workingDir, adjustField2.getText()};

        System.out.println(label);
        
            Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "CRISPRCasFinder executing.... \n press ok button and wait until process success",
                "CRISPRCasFinder",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(cris_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "CRISPRCasFinder executed successfully.");
            this.jButton15.setEnabled(true);
                System.out.println(path_concat);
                this.jButton30.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "CRISPRCasFinder command failed..");
                
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here: SNPSite
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./snpsite_script.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");

        String path_folder = "SNP-sites is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/snp_sites");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
             int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
  JTextField adjustField2 = new JTextField(cores);
                
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("SNP-sites options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select SNP-sites option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t-n: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
        
        String[] staramr_command = { path_Program, new_workingDir, adjustField2.getText()};

        System.out.println(label);
        
            Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "SNP-sites executing.... \n press ok button and wait until process success",
                "SNP-sites",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(staramr_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "SNP-sites executed successfully.");
                this.jButton17.setEnabled(true);
                System.out.println(path_concat);
                this.jButton31.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "SNP-sites command failed..");
                
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        // TODO add your handling code here: FastTree
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_Program = new_workingDir.concat("/Software/biotools/scripts/./fasttree_script.sh");
        //        String file_path1 = new_workingDir.concat("/Software/uploaded/R1.fastq.gz");
        //        String file_path2 = new_workingDir.concat("/Software/uploaded/R2.fastq.gz");

        String path_folder = "FastTree is Successful\nThe result files are available at: ";
        String path_folder1 = new_workingDir.concat("/Software/Output/FastTree");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_Program);
             int label = Runtime.getRuntime().availableProcessors();
        String cores = String.valueOf(label);
  JTextField adjustField2 = new JTextField(cores);
                
//    JCheckBox careful_spades = new JCheckBox("--careful");
//        JComboBox abricate_adapter = new JComboBox(abricate_adap);
//        JComboBox spades_adapter = new JComboBox(spades_adapters);
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(0,1));
        //    myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(new JLabel("FastTree options"));
//        myPanel.add(careful_spades);
        
//        myPanel.add(abricate_adapter);
        
        
        myPanel.add(new JLabel("<html><h3>CPU Core</h3></html>"));
        myPanel.add(adjustField2);
        

        JScrollPane scrPane = new JScrollPane(myPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //    scrPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setPreferredSize(new Dimension( 150, 150));
        //add(scrPane);
        int result = JOptionPane.showConfirmDialog(null, scrPane,
            "Please select FastTree option", JOptionPane.OK_CANCEL_OPTION);
        
//        Object abricateadapter_choose = abricate_adapter.getSelectedItem();
//        String abricateadap = abricateadapter_choose.toString();

        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("DB: " + abricate_adapter.getSelectedItem());
             
             
            System.out.println("CPU Core");
            System.out.println("\t-n: " + adjustField2.getText());
            
//            System.out.println(abricateadap);
            System.out.println(path_Program);
        
        String[] staramr_command = { path_Program, new_workingDir, adjustField2.getText()};

        System.out.println(label);
        
            Runtime r1 = Runtime.getRuntime();
        //        int label = Runtime.getRuntime().availableProcessors();
//        System.out.println(label);
        try {
//            Process p1 = r1.exec(spadesdenovo_command);
JOptionPane.showMessageDialog(null,
                "FastTree executing.... \n press ok button and wait until process success",
                "FastTree",
                JOptionPane.WARNING_MESSAGE);
ProcessBuilder builder = new ProcessBuilder(staramr_command);
builder.redirectErrorStream(true);
Process p1 = builder.start();

           

            
            InputStream itsOutput = p1.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(itsOutput));
BufferedReader stdError = new BufferedReader(new InputStreamReader(p1.getErrorStream()));
//Scanner scan = new Scanner(System.in);

// Wrap the stream in a Reader ...
String line = null;
while ((line = reader.readLine ()) != null) {
    System.out.println (line);
}
while ((line = stdError.readLine()) != null) {
    System.out.println(line);
}
 p1.waitFor();
            if (p1.exitValue() == 0) {
                JOptionPane.showMessageDialog(null,
                    "FastTree executed successfully.");
this.jButton33.setEnabled(true);
                System.out.println(path_concat);
                this.jButton32.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null,
                    "FastTree command failed..");
                
            }
        } catch (IOException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(BacSeq.class.getName()).log(Level.SEVERE, (String)null, ex);
        }
        }
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here: FastQC results
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
      
        String path_folder = "Open FastQC directory";
        String path_folder1 = new_workingDir.concat("/Software/output/FastQC/");
        String final_path= path_folder1.concat("/FastQC");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here: MultiQC result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
      
        String path_folder = "Open MultiQC directory";
        String path_folder1 = new_workingDir.concat("/Software/output/MultiQC/");
        String final_path= path_folder1.concat("/MultiQC");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here: Fastp result
           String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
      
        String path_folder = "Open Fastp directory";
        String path_folder1 = new_workingDir.concat("/Software/output/fastp/");
        String final_path= path_folder1.concat("/fastp");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here: SPAdes result
          String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
      
        String path_folder = "Open SPAdes directory";
        String path_folder1 = new_workingDir.concat("/Software/output/SPAdes/");
        String final_path= path_folder1.concat("/SPAdes");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here: quast result
           String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
       

        String path_folder = "Open Quast directory";
        String path_folder1 = new_workingDir.concat("/Software/output/quast/");
        String final_path= path_folder1.concat("/quast");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here: Busco result
              String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Busco directory";
        String path_folder1 = new_workingDir.concat("/Software/output/busco/");
        String final_path= path_folder1.concat("/busco");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here: Prokka result
              String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Prokka directory";
        String path_folder1 = new_workingDir.concat("/Software/output/prokka/");
        String final_path= path_folder1.concat("/prokka");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here: Abricate result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Abricate directory";
        String path_folder1 = new_workingDir.concat("/Software/output/abricate/");
        String final_path= path_folder1.concat("/abricate");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here: eggnog-mapper result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Eggnog-Mapper directory";
        String path_folder1 = new_workingDir.concat("/Software/output/eggnog-mapper/");
        String final_path= path_folder1.concat("/eggnog-mapper");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here: StarAMR result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open StarAMR directory";
        String path_folder1 = new_workingDir.concat("/Software/output/staramr/");
        String final_path= path_folder1.concat("/staramr");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here: Run-dbcan result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Run_dbcan directory";
        String path_folder1 = new_workingDir.concat("/Software/output/run_dbcan/");
        String final_path= path_folder1.concat("/run_dbcan");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here: CRISPRCasFinder result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open CRISPRCasFinder directory";
        String path_folder1 = new_workingDir.concat("/Software/output/CRISPRCasFinder/");
        String final_path= path_folder1.concat("/CRISPRCasFinder");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here: Roary result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open Roary directory";
        String path_folder1 = new_workingDir.concat("/Software/output/roary/");
        String final_path= path_folder1.concat("/roary");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here: SNPSite result
         String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open SNPSites directory";
        String path_folder1 = new_workingDir.concat("/Software/output/snp_sites/");
        String final_path= path_folder1.concat("/snp_sites");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        // TODO add your handling code here: FastTree result
        String workingDir = System.getProperty("user.dir");
        String new_workingDir = workingDir.replaceAll("target", "");
        String path_folder = "Open FastTree directory";
        String path_folder1 = new_workingDir.concat("/Software/output/FastTree/");
        String final_path= path_folder1.concat("/FastTree");
        String path_concat = path_folder.concat(path_folder1);
        System.out.println(path_concat);
        
                

        
        
    
        File myfile = new File(final_path);
    String path = myfile.getAbsolutePath();
    File dir = new File(path).getParentFile();

try {
                Desktop.getDesktop().open(dir);
            } catch (IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton33ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BacSeq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BacSeq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BacSeq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BacSeq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BacSeq().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
